import { generateFvttId } from "../utils.mjs";
/** @import {Actor} from "@client/documents/actor.mjs" */
/** @import {Roll} from "@client/dice/roll.mjs" */
/** @import {ChatMessage} from "@client/dice/chat-message.mjs" */

const { api } = foundry.applications;
/**
 * @typedef ActorRollOptions
 * @property {string} bonus bonus string which can evaluate any expression
 * @property {string} type the type of roll which will be displayed in the message
 * @property {string} extraDice extra dice to roll
 * @property {string} attribute the attribute which might be added in some cases
 * @property {string} skill the skill bonuse relevant for skill test
 * @property {Boolean} advantage
 * @property {Boolean} disadvantage 
 */

/**
 * Extend the base Actor document
 * @import {Actor} from "@client/documents/actor.mjs"
 * @extends {Actor}
 */
export class RtRActor extends Actor {
  /** @override */
  prepareData() {
    // Prepare data for the actor. Calling the super version of this executes
    // the following, in order: data reset (to clear active effects),
    // prepareBaseData(), prepareEmbeddedDocuments() (including active effects),
    // prepareDerivedData().
    super.prepareData();
  }

  /** @override */
  prepareBaseData() {
    // Data modifications in this step occur before processing embedded
    // documents or derived data.
  }

  /**
   * @override
   * Augment the actor source data with additional dynamic data that isn't
   * handled by the actor's DataModel. Data calculated in this step should be
   * available both inside and outside of character sheets (such as if an actor
   * is queried and has a roll executed directly from it).
   */
  prepareDerivedData() {
    const actorData = this;
    const flags = actorData.flags.reclaimtherealm || {};
  }

  /**
   *
   * @override
   * Augment the actor's default getRollData() method by appending the data object
   * generated by the its DataModel's getRollData(), or null. This polymorphic
   * approach is useful when you have actors & items that share a parent Document,
   * but have slightly different data preparation needs.
   */
  getRollData() {
    return { ...super.getRollData(), ...(this.system.getRollData?.() ?? null) };
  }

  /* -------------------------------------------- */
  /*  Dice Rolls                                  */
  /* -------------------------------------------- */

  /**
   * D20 Test
   * @param {ActorRollOptions} options 
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  d20Test(options) {
    let die = 'd20';
    if (options.advantage && !options.disadvantage) {
        die = '2d20kh';
    } if (options.disadvantage && !options.advantage) {
        die = '2d20kl';
    }

    let d20TestBonuses = '';
    if (this.getRollData().d20Test !== 0) {
      d20TestBonuses = ' +@d20Test'
    }
    options.extraDice = options.extraDice ? options.extraDice : '';

    if (this._hasStatusEffect('DISTRACTED')) {
      d20TestBonuses = d20TestBonuses + ' -2';
    }

    let formula=`${die}${options.extraDice}${d20TestBonuses}${options.bonus}`;
    return this.roll(formula, options);
  }

  /**
   * Meele Martial Attack
   * @param {ActorRollOptions} options 
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  meleeMartialAttack(options) {
    options.type = 'MELEE MARTIAL ATTACK';
    options.bonus = options.bonus ? options.bonus + ' +@meleeMartialAttack' : ' +@meleeMartialAttack';
    if (this._hasStatusEffect('PRONE')) {
      options.disadvantage = true;
    }
    return this._attackTest(options);
  }

  /**
   * Ranged Martial Attack
   * @param {ActorRollOptions} options 
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  rangedMartialAttack(options) {
    options.type = 'RANGED MARTIAL ATTACK';
    options.bonus = options.bonus ? options.bonus + ' +@rangedMartialAttack' : ' +@rangedMartialAttack';
    return this._attackTest(options);
  }

  /**
   * Meele Spell Attack
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  meleeSpellAttack(options) {
    options.type = 'MELEE SPELL ATTACK';
    options.bonus = options.bonus ? options.bonus + ' +@meleeSpellAttack' : ' +@meleeSpellAttack';
    if (this._hasStatusEffect('PRONE')) {
      options.disadvantage = true;
    }
    return this._attackTest(options);
  }

  /**
   * Ranged Spell Attack
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  rangedSpellAttack(options) {
    options.type = 'RANGED SPELL ATTACK';
    options.bonus = options.bonus ? options.bonus + ' +@rangedSpellAttack' : ' +@rangedSpellAttack';
    return this._attackTest(options);
  }

  /**
   * Martial Test
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  martialTest(options) {
    if (this._hasStatusEffect('FRIGHTENED I')) {
      options.disadvantage = true;
    }
    if (this._hasStatusEffect('CURSED I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' -d4' : ' -d4';
    }
    if (this._hasStatusEffect('BLESS I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' +d4' : ' +d4';
    }
    options.type = 'MARTIAL TEST';
    options.bonus = options.bonus ? options.bonus + ' +@martialTest' : ' +@martialTest';
    options.bonus =  options.bonus + this._getAttributeRollBonus(options.attribute);

    return this.d20Test(options);
  }

   /**
   * Spell Test
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  spellTest(options) {
    if (this._hasStatusEffect('FRIGHTENED I')) {
      options.disadvantage = true;
    }
    if (this._hasStatusEffect('CURSED I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' -d4' : ' -d4';
    }
    if (this._hasStatusEffect('BLESS I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' +d4' : ' +d4';
    }
    attributeTestData = this._getAttributeRollBonus(options.attribute);
    options.type = 'SPELL TEST';
    options.bonus = options.bonus ? options.bonus + ' +@spellTest' : ' +@spellTest';
    options.bonus =  options.bonus + this._getAttributeRollBonus(options.attribute);

    return this.d20Test(options);
  }

  /**
   * Attribute Test
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  attributeTest(options) {
    let attributeTestData = this._getAttributeRollBonus(options.attribute);
    options.bonus = options.bonus ? options.bonus + attributeTestData.rollData : attributeTestData.rollData;

    if (!options.type) {
      options.type = attributeTestData.rollType + ' ATTRIBUTE TEST';
    } else {
      options.type = attributeTestData.rollType + ' ' + options.type;
    }

    if (this._hasStatusEffect('INTOXICATED') && ( options.attribute === 'agi' || options.attribute === 'per')) {
      options.bonus = options.bonus + ' -5';
    }
    if (options.attribute === 'per' && this._hasStatusEffect('DISTRACTED')) {
      options.disadvantage = true;
    }
    if (options.attribute === 'agi' && this._hasStatusEffect('HASTE I')) {
      options.advantage = true;
    }
    if (this._hasStatusEffect('FOCUSED') && (options.attribute === 'int' || options.attribute === 'per')) {
      options.advantage = true;
    }

    return this.d20Test(options);
  }

  /**
   * Skill Test
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  skillTest(options) {
    let skillTestData = this._getSkillRollBonus(options.skill);
    options.bonus =  options.bonus ? options.bonus + skillTestData.rollData : skillTestData.rollData;
    options.type = skillTestData.rollType + ' SKILL TEST';
    return this.attributeTest(options);
  }

  /**
   * Save Test
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  saveTest(options) {
    let saveRollData = this._getSaveRollBonus(options.save);
    options.bonus =  options.bonus ? options.bonus + saveRollData.rollData : saveRollData.rollData;
    options.type = saveRollData.rollType;

    if (this._hasStatusEffect('VULNURABLE I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' -d4' : ' -d4';
    }
    if (this._hasStatusEffect('PROTECTION I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' +d4' : ' +d4';
    }

    return this.d20Test(options);
  }

  /**
   * Make a Damage Roll
   * @param {String} method damage calculation method: RTR.abilityDamageCalculationMethod 
   * @param {boolean} halfDamage
   * @param {ActorRollOptions} options
   * @param {String} formula custom roll formula for custom rolls
   * @param {String} dmgType damage type
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  damageRoll(method, halfDamage, options, formula, dmgType) {
    if (this._hasStatusEffect('WEAKENED I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' -d6' : ' -d6';
    }
    let damage;
    switch (method) {
      case 'lightMartialDamage':
        damage = '@lightMartialDamage';
        break;
      case 'mediumMartialDamage':
        damage = '@mediumMartialDamage';
        break;
      case 'heavyMartialDamage':
        damage = '@heavyMartialDamage';
        break;
      case 'custom':
        damage = formula;
        break;
    }
    let damageFormula;
    if (halfDamage) {
      damageFormula = `floor((${damage}${options.extraDice ?? ''}${options.bonus ?? ''}) / 2)[${dmgType}]`;
    } else {
      damageFormula = `${damage}${options.extraDice ?? ''}${options.bonus ?? ''}[${dmgType}]`;
    }
    return this.roll(damageFormula, options);
  }

  /**
   * @param {string} formula
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   */
  roll(formula, options) {
    let label = options.type;
    if (options.advantage && !options.disadvantage) {
        label = '<span style="color:green">ADVANTAGE ' + options.type + '</span>';
    } if (options.disadvantage && !options.advantage) {
        label = '<span style="color:red">DISADVANTAGE ' + options.type + '</span>';
    }
    let roll = new Roll(formula, this.getRollData());
    return roll.toMessage({
      speaker: ChatMessage.getSpeaker({ actor: this }),
      flavor: label,
      rollMode: game.settings.get('core', 'rollMode'),
    });
  }

  /**
   * Attack Test, any interactions that modifies any attack happens here.
   * @param {ActorRollOptions} options
   * @returns {Promise<ChatMessage>} Promise containing chat object containing roll data
   * @private
   */
  _attackTest(options) {
    if (this._hasStatusEffect('FRIGHTENED I')) {
      options.disadvantage = true;
    }
    if (this._hasStatusEffect('CURSED I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' -d4' : ' -d4';
    }
    if (this._hasStatusEffect('BLESS I')) {
      options.extraDice = options.extraDice ? options.extraDice + ' +d4' : ' +d4';
    }

    return this.d20Test(options);
  }


  /* -------------------------------------------- */
  /*  Ability Functions                           */
  /* -------------------------------------------- */

  /**
   * Pay the usage costs of an ability.
   * @param {Object} usageCost 
   * @return {Boolean} true if ability was used
   */
  async payAbilityUsageCosts(usageCost) {
    const updatePayload = {};
    const warningMessages = [];
    if (usageCost.arcanaCost > 0) {
      if (usageCost.arcanaCost > this.system.arcana.value) {
        warningMessages.push(`Not enough arcana to use ability Required: ${usageCost.arcanaCost}, Available: ${this.system.arcana.value}`);
      }
      const newArcana = Math.max(0, this.system.arcana.value - usageCost.arcanaCost);
      updatePayload['system.arcana.value'] = newArcana;
    }
    if (usageCost.staminaCost > 0) {
      if (usageCost.staminaCost > this.system.stamina.value) {
        warningMessages.push(`Not enough stamina to use ability Required: ${usageCost.staminaCost}, Available: ${this.system.stamina.value}`);
      }
      const newStamina = Math.max(0, this.system.stamina.value - usageCost.staminaCost);
      updatePayload['system.stamina.value'] = newStamina;
    }

    if (warningMessages.length > 0) {
      const confirm = await api.DialogV2.prompt({
          content: warningMessages.join('<br>'),
          rejectClose: false,
          modal: true,
          window: { title: "Insufficent Resources for Ability", icon: "fa-solid fa-triangle-exclamation" },
          ok: { label: 'Use Ability anyways' }
      });
      if (!confirm) {
          return false;
      }
    }
    this.update(updatePayload);
    return true;
  }

  /**
   * Determines if the Attack Hits the actor
   * @param {number} attackResult total attack result
   * @param {number} unmodifiedResult unmodified attack result
   * @returns {Promise<string>} Promise containing result type see RTR.abilityResultCondition
   */
  determineAttackHit(attackResult, unmodifiedResult) {
    if (this.type === 'npc') { {[]}
      if (unmodifiedResult === 1) {
        return Promise.resolve('onFailure');
      } else if (unmodifiedResult === 20) {
        return Promise.resolve('onHit');
      } else if (attackResult >= (10 + this.system.defenses.dodge)) {
        return Promise.resolve('onHit');
      } else {
        return Promise.resolve('onPartialHit');
      }
    } else {
      // TODO ask for defensice roll, should do via an option window where you can add temp bonuses as well as adv/disadv
      return Promise.resolve('onHit');
    }
  }

  /* -------------------------------------------- */
  /*  Interactions with other Actors              */
  /* -------------------------------------------- */

  /**
   * apply damage to actor
   * @param {number} amount 
   * @param {string} type 
   */
  applyDamage(amount, type) {
    ChatMessage.create({
        speaker: ChatMessage.getSpeaker({ actor: this }),
        content: `${this.name} recieves ${amount} ${type} damage.`,
        style: CONST.CHAT_MESSAGE_STYLES.OOC
    });

    let remainingAmount = amount;
    if (this.system.tempHp > 0) {
      remainingAmount = amount - Math.min(this.system.tempHp, amount);
      let newTempHp = Math.max(0, this.system.tempHp - amount);
      this.update({ "system.tempHp": newTempHp});
    }
    // TODO: add more detailed message which shows also the resistances and tempHP reduced
    const resistanceAmount = this._hasResistance(type);
    remainingAmount-= resistanceAmount;
    let newHp = Math.max(0, this.system.hp.value - remainingAmount);
    this.update({ "system.hp.value": newHp});
  }

  /**
   * heal actor
   * @param {number} amount 
   */
  heal(amount) {
    ChatMessage.create({
        speaker: ChatMessage.getSpeaker({ actor: this }),
        content: `${this.name} heals ${amount} HP.`,
        style: CONST.CHAT_MESSAGE_STYLES.OOC
    });

    let newHp = Math.min(this.system.hp.max, this.system.hp.value + amount);
    this.update({ "system.hp.value": newHp});
  }

  /**
   * toggle Status effect
   * @param {String} statusEffectId 
   * @returns 
   */
  async toggleStatusEffect(statusEffectId) {
    const existing = this.effects.get(generateFvttId(`RTR${statusEffectId}`));
    if (existing) return existing.delete();
    const effect = await ActiveEffect.implementation.fromStatusEffect(statusEffectId);
    return ActiveEffect.implementation.create(effect, { parent: this, keepId: true });
  }

  /* -------------------------------------------- */
  /*  Private Helpers                             */
  /* -------------------------------------------- */

  /**
   * checks if actor has a status effect
   * @param {string} statusEffectName 
   * @returns true if status effect is active on actor and false if not
   * @private
   */
  _hasStatusEffect(statusEffectName) {
    const existing = this.appliedEffects.find(effect => effect.name === statusEffectName);
    return existing !== undefined;
  }

  /**
   * @param {string} attribute 
   * @returns attribute roll data string
   * @private
   */
  _getAttributeRollBonus(attribute) {
    let foundAttribute = Object.keys(CONFIG.RTR.attributes).find(attributeName => attributeName === attribute);
    if (!foundAttribute) {
      ui.notifications.error(`Attribute ${attribute} not found`, {console: true});
      return {};
    }
    return { rollData: `+@attributes.${foundAttribute}.value`, rollType: foundAttribute.toUpperCase() };
  }

  /**
   * @param {string} skill 
   * @returns skill roll data string
   * @private
   */
  _getSkillRollBonus(skill) {
    let foundSkill = Object.keys(CONFIG.RTR.skills).find(skillname => skillname === skill);
    if (!foundSkill) {
      ui.notifications.error(`Skill ${skill} not found`, {console: true});
      return {};
    }
    if (foundSkill === 'stealth') {
      return { rollData: `+@skills.${foundSkill}.rank-@manoeuvrePenalty`, rollType: foundSkill }; 
    }
    return { rollData: `+@skills.${foundSkill}.rank`, rollType: foundSkill };
  }

  /**
   * @param {string} save 
   * @returns {Object} save roll with roll type label
   * @private
   */
  _getSaveRollBonus(save) {
    switch(save) {
      case 'stability': return { rollData: '+@stabilitySave', rollType: 'STABILITY SAVE'};
      case 'dodge': return { rollData: '+@dodgeSave', rollType: 'DODGE SAVE'};
      case 'toughness': return { rollData: '+@toughnessSave', rollType: 'TOUGHNESS SAVE'};
      case 'willpower': return { rollData: '+@willpowerSave', rollType: 'WILLPOWER SAVE'};
      case 'shieldblock': return { rollData: '+@shieldBlock', rollType: 'SHIELD BLOCK'};
    }
    ui.notifications.error(`Unkown Save ${save}`, {console: true});
    return {};
  }

  /**
   * @param {string} type 
   * @returns {number} resistance against the type
   * @private
   */
  _hasResistance(type) {
    const resistance = this.system.resistances.find(r => r.damageType.toUpperCase() === type.toUpperCase());
    return resistance?.value ?? 0;
  }
}
